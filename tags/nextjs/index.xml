<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NextJS on @MindPatch</title><link>https://www.mindpatch.net/tags/nextjs/</link><description>Recent content in NextJS on @MindPatch</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.mindpatch.net/tags/nextjs/index.xml" rel="self" type="application/rss+xml"/><item><title>Solving DoxPit Challenge</title><link>https://www.mindpatch.net/posts/solving-doxpit-challenge/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://www.mindpatch.net/posts/solving-doxpit-challenge/</guid><description>&lt;h1 id="htb-solving-doxpit-challange">[HTB] Solving DoxPit Challange&lt;/h1>
&lt;p>&lt;img src="https://miro.medium.com/v2/resize:fit:700/1*tWUMuT1J0TUSBua9hOmWcg.png" alt="">&lt;/p>
&lt;p>In this write-up, I’ll walk you through the process of solving the HTB DoxPit challenge&lt;/p>
&lt;p>This challenge features a mix of vulnerabilities in both a Flask app and a NextJS application through a series of methodical steps, I’ll show you how to exploit these vulnerabilities and successfully capture the flag&lt;/p>
&lt;p>Let’s dive into the details!&lt;/p>
&lt;h1 id="getting-started">Getting Started&lt;/h1>
&lt;p>The first step in tackling the DoxPit challenge was to download the provided challenge code. This code revealed two distinct folders: one for a NextJS app and the other for a Flask app.&lt;/p></description></item></channel></rss>