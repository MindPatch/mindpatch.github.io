import fs from 'fs'
import path from 'path'
import matter from 'gray-matter'
import { remark } from 'remark'
import html from 'remark-html'
import remarkPrism from 'remark-prism'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const postsDirectory = path.join(process.cwd(), 'posts')

async function getPostBySlug(slug) {
  try {
    const fullPath = path.join(postsDirectory, `${slug}.md`)
    const fileContents = fs.readFileSync(fullPath, 'utf8')
    const { data, content } = matter(fileContents)

    // Convert markdown to HTML
    const processedContent = await remark()
      .use(html, { sanitize: false })
      .use(remarkPrism)
      .process(content)
    const contentHtml = processedContent.toString()

    return {
      slug,
      title: data.title || '',
      date: data.date || '',
      excerpt: data.excerpt || '',
      content: contentHtml,
      tags: data.tags || [],
      author: data.author || 'MindPatch'
    }
  } catch (error) {
    console.error(`Error reading post ${slug}:`, error)
    return null
  }
}

async function getAllPosts() {
  const fileNames = fs.readdirSync(postsDirectory)
  const slugs = fileNames
    .filter(name => name.endsWith('.md'))
    .map(name => name.replace(/\.md$/, ''))

  const posts = await Promise.all(
    slugs.map(slug => getPostBySlug(slug))
  )
  
  return posts
    .filter(post => post !== null)
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
}

async function generateBlogPostsFile() {
  console.log('🔄 Generating blog posts from markdown files...')
  
  const posts = await getAllPosts()
  
  const blogPostsContent = `// This file is auto-generated by the build process
// Do not edit manually - it will be overwritten

export interface BlogPost {
  slug: string
  title: string
  date: string
  excerpt: string
  content: string
  tags: string[]
  author: string
}

export const blogPosts: BlogPost[] = ${JSON.stringify(posts, null, 2)}
`

  // Ensure lib directory exists
  const libDir = path.join(__dirname, '..', 'lib')
  if (!fs.existsSync(libDir)) {
    fs.mkdirSync(libDir, { recursive: true })
  }

  const outputPath = path.join(libDir, 'blog-posts.ts')
  fs.writeFileSync(outputPath, blogPostsContent, 'utf8')
  
  console.log(`✅ Generated blog posts file with ${posts.length} posts`)
  console.log(`📝 Posts generated:`)
  posts.forEach(post => {
    console.log(`   - ${post.title} (${post.date})`)
  })
}

// Run the script
generateBlogPostsFile().catch(console.error) 